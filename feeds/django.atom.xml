<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Brandon Waskiewicz</title><link href="https://brandonw.github.io/" rel="alternate"></link><link href="https://brandonw.github.io/feeds/django.atom.xml" rel="self"></link><id>https://brandonw.github.io/</id><updated>2014-12-02T19:45:00-05:00</updated><entry><title>GET-preserving Django template tag</title><link href="https://brandonw.github.io/get-preserving-django-template-tag.html" rel="alternate"></link><updated>2014-12-02T19:45:00-05:00</updated><author><name>Brandon Waskiewicz</name></author><id>tag:brandonw.github.io,2014-12-02:get-preserving-django-template-tag.html</id><summary type="html">&lt;h3&gt;The Problem&lt;/h3&gt;
&lt;p&gt;Giving users a view into a long list of items is a common function. A very
popular way to manage that view is to use Django's built in pagination feature.
This feature lets you create anchors to the page while adding the page
GET parameter.&lt;/p&gt;
&lt;p&gt;This works well as long as you don't need to run any other similar logic in
parallel, but it starts to break down a little as you add things like sorting,
filtering, adjusting page size, and other functions that are best submitted as
GET parameters. This post will describe the fix that I found at
&lt;a href="https://djangosnippets.org/snippets/1627/"&gt;
https://djangosnippets.org/snippets/1627/&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;A Little More In Depth&lt;/h3&gt;
&lt;p&gt;To be clear, the above problem isn't insurmountable. For example, if you have a
Django template that assumes a context with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a &lt;a href="https://docs.djangoproject.com/en/dev/topics/pagination/#page-objects"&gt;page&lt;/a&gt;
object named &lt;code&gt;page_obj&lt;/code&gt; (paired with the &lt;code&gt;GET&lt;/code&gt; param of &lt;code&gt;page&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;the filter constraint as &lt;code&gt;filter&lt;/code&gt; (paired with the &lt;code&gt;GET&lt;/code&gt; param of
&lt;code&gt;filter&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;the sort constraint as &lt;code&gt;sort&lt;/code&gt; (paired with the &lt;code&gt;GET&lt;/code&gt; param of
&lt;code&gt;sort&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;then you could do something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;&amp;lt;a href=&amp;quot;?page=&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;page_obj.next_page_number&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;amp;filter=&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;filter&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;amp;sort=&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;sort&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&amp;gt;next&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This would work, however it requires you to not only know what all of the
potential &lt;code&gt;GET&lt;/code&gt; params are for the paginated view, but also what their
values are (you must pass the values in via the template context). This is a
lot of extra work for something you don't even care about, other than needing
everything but the &lt;code&gt;page&lt;/code&gt; paramter to remain the same as the current
request.&lt;/p&gt;
&lt;h3&gt;The Setup&lt;/h3&gt;
&lt;p&gt;The way we will reduce the work required for this repetitive task is to use a
Django
&lt;a href="https://docs.djangoproject.com/en/dev/howto/custom-template-tags/"&gt;template
tag&lt;/a&gt;. The first thing you must do is choose which Django app the template
tag lives inside of. If you only need to use this tag inside of a single app,
then you can put it inside of that app's directory. Otherwise, feel free to
make a dedicated app for shareable code. The only requirement to use this
template tag is that the app it is defined in is included in the
&lt;code&gt;INSTALLED_APPS&lt;/code&gt; config tuple.&lt;/p&gt;
&lt;p&gt;Create a directory named &lt;code&gt;templatetags&lt;/code&gt; inside of your chosen app, create
the &lt;code&gt;__init__.py&lt;/code&gt; file, and then start a new file named
&lt;code&gt;foo_extras.py&lt;/code&gt;, where &lt;code&gt;foo&lt;/code&gt; is your app name. Start the template tag
off with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;

&lt;span class="n"&gt;register&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Library&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This readies you to create a custom template tag via Django's template module.&lt;/p&gt;
&lt;h3&gt;Digging Deeper&lt;/h3&gt;</summary><category term="django"></category><category term="template tags"></category></entry></feed>